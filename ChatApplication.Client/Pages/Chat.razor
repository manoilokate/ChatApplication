@page "/"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="container mt-3">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="card">
                <div class="card-header">
                    <h5 style="display:flex; align-content:center; justify-content:center">Chat</h5>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="userInput">User:</label>
                        <input id="userInput" class="form-control" @bind="userInput" />
                    </div>
                    <div class="form-group">
                        <label for="messageInput">Message:</label>
                        <input id="messageInput" class="form-control" @bind="messageInput" size="50" />
                    </div>
                    <button class="btn btn-primary" @onclick="Send" disabled="@(!IsConnected)" style="margin-top:10px">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>
<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection; // SignalR connection
    private List<string> messages = []; // List of messages
    private string? userInput; // Username
    private string? messageInput; // Message

    // Initialize SignalR connection
    protected override async Task OnInitializedAsync() 
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    // Send message and then clear the input
    private async Task Send() 
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            messageInput = string.Empty;
        }
    }
    // Check connectiot with SignalR
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected; 

    // Dispose SignalR connection
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}